#define _CRT_SECURE_NO_DEPRECATE
#include<stdio.h>
#include<stdlib.h>
#include<iostream>


using namespace std;
int globalflag=0;
#define max 65536

struct treenode
{
	unsigned int frequency,height;
	unsigned char data;
	treenode *left;
	treenode *right;
};




 void findpattern(unsigned char symbol,unsigned int &vsize,unsigned int &vpsize,unsigned char* &pattern,unsigned char* &patternf,struct treenode node)
{
	int i=0;
	
	if((node.left==NULL)&&(node.right==NULL)&&(node.data==symbol))
	{
		vpsize=vsize;
		for(i=0;i<vpsize;i++)
			patternf[i]= pattern[i]; 
	}
	if((node.left==NULL)&&(node.right==NULL)&&(node.data!=symbol))
	{
		
	}
	else if((node.left!=NULL)&&(node.right!=NULL))
	{
		vsize++;
		
		pattern[vsize-1]=1;
		findpattern(symbol,vsize,vpsize,pattern,patternf,*node.left);

		
		pattern[vsize-1]=0;
		findpattern(symbol,vsize,vpsize,pattern,patternf,*node.right);
		globalflag=1;
		if(globalflag==1)
		{ vsize--; globalflag=0; }
	}
}


int main(int argc, const char* argv[])
{
	
const char* filenamein=(const char*) argv[1];
const char* filenameout=(const char*) argv[2];



/*read header and store imagedata in unsigned char* image */
FILE *fpt;
filenamein="win2.exe";
filenameout="hc.exe";
fpt = fopen(filenamein,"rb");




/*write header file of compressed file*/
FILE *comp;
comp = fopen(filenameout,"wb");


/*Calculate frequencies and store in array */
unsigned long int totbytes=0;
unsigned int n;
unsigned char temp;
unsigned int freq[256];
for(n=0;n<256;n++)
{	freq[n]=0;}
int i=1;      
int l=0;      /*number of bytes read */
while(i)
{
i=fread(&temp,1,1,fpt);
if(i)
{
	totbytes++;
	for(n=0;n<256;n++)
	{
		if(temp==n)
			freq[n]++;
	}
}
l++;
}

for(i=0;i<256;i++)
{
	fwrite(&freq[i],sizeof(unsigned int),1,comp);
}
/*open file again */
fpt = fopen(filenamein,"rb");

/* sort array by frequency store sorted values and freq in 2 arrays */
unsigned char sortedchar[256],isortfreq[256];
unsigned int sortedfreq[256];
unsigned char a;
int b;
for(n=0;n<256;n++)
{
	sortedfreq[n]=freq[n];
	sortedchar[n]=n;
}
for(n=0;n<256;n++)
{
	for (i = 0; i < 256; i++)
    {
        if (sortedfreq[n] < sortedfreq[i])
        {
            a =  sortedchar[n];
			sortedchar[n] = sortedchar[i];
            sortedchar[i] = a;

			b =  sortedfreq[n];
			sortedfreq[n] = sortedfreq[i];
            isortfreq[i]=sortedfreq[i] = b;

		}
    }
}



/*BUILD BINARY TREE */
int unbuiltsize=0,entries=0;
int height=0;
unsigned long int x=1;
treenode* node;
node = (struct treenode*)malloc(256*256*sizeof(struct treenode));


/* Initialize all end nodes */
for(i=0;i<256;i++)
{
	if(sortedfreq[i]>0)
	{
		unbuiltsize++;
		node[entries].data=sortedchar[i];
		node[entries].frequency=sortedfreq[i];
		node[entries].left=node[entries].right=NULL;
		node[entries].height=height;
		entries++;
	}
}
int totvals=unbuiltsize;

//node[1] = (struct treenode*)malloc(unbuiltsize*sizeof(struct treenode*));
treenode tmp;
int nentries;
nentries=entries;
unsigned int k;
while(node[nentries-1].frequency<totbytes)
{
	height++;
	
	/*combine first two nodes */
	node[nentries].data=node[nentries-unbuiltsize].data;
	node[nentries].frequency=node[nentries-unbuiltsize].frequency+node[nentries-unbuiltsize+1].frequency;
	node[nentries].left=&node[nentries-unbuiltsize];
	node[nentries].right=&node[nentries-unbuiltsize+1];
	node[nentries].height=height;
	unbuiltsize--;
	nentries++;

	/*copy remaining nodes */
	k=nentries+unbuiltsize-1;
	for(;nentries<k;)
	{
	node[nentries].data=node[nentries-unbuiltsize].data;
	node[nentries].frequency=node[nentries-unbuiltsize].frequency;
	node[nentries].left=node[nentries-unbuiltsize].left;
	node[nentries].right=node[nentries-unbuiltsize].right;
	node[nentries].height=height;
	nentries++;
	}

	/* sort  again new nodes node[height][n]  */
	
	for(n=0;n<unbuiltsize;n++)
	{
		for (i = 0; i < unbuiltsize; i++)
		{
		 if (node[nentries-unbuiltsize+n].frequency < node[nentries-unbuiltsize+i].frequency)
			{
	        tmp =  node[nentries-unbuiltsize+n];
			node[nentries-unbuiltsize+n] = node[nentries-unbuiltsize+i];
            node[nentries-unbuiltsize+i] = tmp;

			}
		}
	}

}
 int parent=nentries-1;

/*  find variable patterns and store */
unsigned char* vpattern[256];
unsigned char* ptn;
ptn=(unsigned char*)malloc(256*sizeof(unsigned char*));
unsigned int vsize,vpsize[256];
unsigned int ind;
for(ind=0;ind<256;ind++)
if(freq[ind]>0)
{
printf("%u \t %d\n",ind,freq[ind]);
vpattern[ind]=(unsigned char*)malloc(256*sizeof(unsigned char*));
for(i=0;i<256;i++)
{
	vpattern[ind][i]=0;
	ptn[i]=0;
}
vpsize[ind]=0;
vsize=0; globalflag=0;
findpattern((unsigned char)ind,vsize,vpsize[ind],ptn,vpattern[ind],node[parent]);

printf("%u\t",ind);
for(i=0;i<vpsize[ind];i++)
	printf("%d \t",vpattern[ind][i]);
printf("\n");
}

  

/* Read input and encode with variable patterns */
unsigned char input,byte;
int flag=0;
i=0;
while(i<8)
{
	if(flag==0)
	{
	b=fread(&input,1,1,fpt);
	if(b==0)
	{
		fwrite(&byte,1,1,comp);
		printf("\n%u",byte);
		goto out;
	}
	k=0;
	}
	while((k<vpsize[input])&&(i<8))
	{
		if(flag==1)
			flag=0;
		if(vpattern[input][k]==0)
		{
			byte &= ~(1 << (7-i));
			i++; k++;
		}
		else if (vpattern[input][k]==1)
		{
			byte |= 1 << (7-i);
			i++; k++;
		}
		if(i==8)
		{
			fwrite(&byte,1,1,comp);
			
		}
		if((k<vpsize[input])&&(i==8))
		{
			flag=1;
			i=0;
		}
		else if((i==8))
			i=0;
			
	}
	
}
out:
 
fclose(fpt);
fclose(comp);
printf("end");



}
